{"version":3,"sources":["ui/GlobalStyles.tsx","ui/Layout.tsx","redux/Form/reducer.ts","redux/Form/constants.ts","redux/rootReducer.ts","redux/store.ts","redux/Form/creators.ts","ui/Button.tsx","ui/Form.tsx","ui/Input.tsx","ui/Title.tsx","features/StepForm.tsx","theme.ts","features/Word.tsx","utils/animations.ts","utils/hooks.ts","features/Sentence.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","_templateObject","Steps","Layout","styled","main","Layout_templateObject","constants","initialState","activeStep","WHO","values","_values","Object","defineProperty","WHAT","WHEN","WHERE","combineReducers","Form","state","arguments","length","undefined","action","type","objectSpread","payload","stepId","value","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","setActiveStep","Button","button","Button_templateObject","props","primary","theme","colors","secondary","variant","white","text","_ref","children","_ref$initialValues","initialValues","onSubmit","_useState","useState","_useState2","slicedToArray","setValues","useEffect","handleSubmit","useCallback","e","preventDefault","handleChange","name","onChange","Input","input","Input_templateObject","InputComponent","placeholder","react_default","a","createElement","target","Title","h1","Title_templateObject","messages","_messages","connect","initialValue","submitValues","_messages$activeStep","title","isFirst","isLast","handleGoBack","dist","width","flexDirection","ui_Title","as","ui_Form","_ref3","ui_Input","mt","justifyContent","ui_Button","onClick","Span","posed","div","scale","transition","Word_templateObject","Word","React","memo","_ref$value","isNew","ref","useRef","current","usePrevious","pose","prevProps","nextProps","entries","map","_ref2","key","features_Word","Number","App","es","store","styled_components_browser_esm","ui_Layout","features_Sentence","features_StepForm","ui_GlobalStyles","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9e2647f.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyles = createGlobalStyle`\n    body, html {\n        min-height: 100%;\n        height: 100%;\n        font-size: 10px;\n        background: #f2f5f7;\n    }\n\n    *, *:after, *:before {\n        box-sizing: border-box;\n    }\n`\n\nexport default GlobalStyles\n","import styled from 'styled-components'\n\nconst Layout = styled.main`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n  min-height: 100vh;\n  padding: 0 2rem;\n`\n\nexport default Layout\n","import constants from './constants'\nimport { FormActionTypes } from './creators'\n\nexport enum Steps {\n  WHO = 0,\n  WHAT = 1,\n  WHEN = 2,\n  WHERE = 3,\n}\n\nexport interface IFormState {\n  activeStep: Steps\n  values: any\n}\n\nconst initialState: IFormState = {\n  activeStep: Steps.WHO,\n  values: {\n    [Steps.WHO]: '',\n    [Steps.WHAT]: '',\n    [Steps.WHEN]: '',\n    [Steps.WHERE]: '',\n  },\n}\n\nexport default (state = initialState, action: FormActionTypes) => {\n  switch (action.type) {\n    case constants.SET_ACTIVE_STEP:\n      return { ...state, activeStep: action.payload.stepId }\n\n    case constants.SUBMIT_VALUES:\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          [action.payload.stepId]: (action.payload as any).value, // TODO\n        },\n      }\n\n    default:\n      return state\n  }\n}\n","export default {\n  SET_ACTIVE_STEP: 'FORM/SET_ACTIVE_STEP',\n  SUBMIT_VALUES: 'FORM/SUBMIT_VALUES',\n}\n","import { combineReducers } from 'redux'\nimport Form, { IFormState } from './Form/reducer'\n\nexport interface IStore {\n  Form: IFormState\n}\n\nexport default combineReducers({\n  Form,\n})\n","import { createStore } from 'redux'\nimport reducers from './rootReducer'\n\nexport default createStore(\n  reducers,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n)\n","import { Steps } from './reducer'\nimport constants from './constants'\n\ninterface SetActiveStepAction {\n  type: typeof constants.SET_ACTIVE_STEP\n  payload: { stepId: Steps }\n}\n\ninterface SubmitValuesAction {\n  type: typeof constants.SUBMIT_VALUES\n  payload: { stepId: Steps; value: string }\n}\n\nexport const setActiveStep = (stepId: Steps) => ({\n  type: constants.SET_ACTIVE_STEP,\n  payload: { stepId },\n})\n\nexport const submitValues = (stepId: Steps, value: string) => ({\n  type: constants.SUBMIT_VALUES,\n  payload: { stepId, value },\n})\n\nexport type FormActionTypes = SubmitValuesAction | SetActiveStepAction\n","import styled from 'styled-components'\nimport { ITheme } from '../theme'\n\ninterface IProps {\n  variant: 'primary' | 'secondary'\n  theme: ITheme\n}\n\nconst background = (props: IProps) =>\n  ({\n    primary: props.theme.colors.primary,\n    secondary: 'none',\n  }[props.variant])\n\nconst color = (props: IProps) =>\n  ({\n    primary: props.theme.colors.white,\n    secondary: props.theme.colors.text,\n  }[props.variant])\n\nconst Button = styled.button`\n  background: ${background};\n  border-radius: 3rem;\n  border: none;\n  color: ${color};\n  cursor: pointer;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 1.5rem 3rem;\n`\n\nexport default Button\n","import React, { useState, useCallback, useEffect } from 'react'\n\nexport type FormValue = string\nexport type FormValues = { [key: string]: FormValue }\n\ninterface IProps {\n  children: (params: { values: FormValues; onChange: any; onSubmit: any }) => React.ReactElement\n  onSubmit: (values: FormValues) => void\n  initialValues: FormValues\n}\n\nconst Form = ({ children, initialValues = {}, onSubmit }: IProps) => {\n  const [values, setValues] = useState(initialValues)\n\n  // This updates values when user goes through steps\n  useEffect(() => setValues(initialValues), [initialValues])\n\n  // Memoizing handlers to keep their reference if deps don't change\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault()\n      setValues(initialValues)\n      onSubmit(values)\n    },\n    [initialValues, values, onSubmit]\n  )\n\n  const handleChange = useCallback(\n    (value: FormValue, name: FormValue) => setValues({ ...values, [name]: value }),\n    [values]\n  )\n\n  return children({\n    values,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n  })\n}\n\nexport default Form\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ITheme } from '../theme'\n\ninterface IProps {\n  theme: ITheme\n}\n\ninterface IComponentProps {\n  name: string\n  onChange: (value: number | string, name: string) => void\n  type: 'text'\n  placeholder?: string\n  value: number | string\n}\n\nconst Input = styled.input`\n  background: white;\n  border-radius: 1rem;\n  border: 0.15rem solid white;\n  box-shadow: 0 1.5rem 3rem rgba(34, 36, 38, 0.15);\n  font-size: 1.8rem;\n  height: 6rem;\n  outline: none;\n  padding: 0 2rem;\n  transition: border 300ms;\n  width: 100%;\n\n  &:focus,\n  &:active {\n    border-color: ${(props: IProps) => props.theme.colors.primary};\n  }\n`\n\nconst InputComponent = ({ name, onChange, value, type, placeholder }: IComponentProps) => (\n  <Input\n    name={name}\n    onChange={e => onChange(e.target.value, name)}\n    placeholder={placeholder}\n    type={type}\n    value={value}\n  />\n)\n\nexport default InputComponent\n","import styled from 'styled-components'\nimport { ITheme } from '../theme'\n\ninterface IProps {\n  theme: ITheme\n  variant?: 'primary' | 'secondary'\n}\n\nconst fontSize = (props: IProps) =>\n  ({ secondary: '2.6rem', primary: '3.6rem' }[props.variant || 'primary'])\n\nconst Title = styled.h1`\n  font-size: ${fontSize};\n  color: ${(props: IProps) => props.theme.colors.text};\n`\n\nexport default Title\n","import React from 'react'\nimport { Flex } from 'rebass'\nimport { connect } from 'react-redux'\n\nimport { IStore } from '../redux/rootReducer'\nimport { setActiveStep, submitValues } from '../redux/Form/creators'\nimport { Steps } from '../redux/Form/reducer'\nimport Button from '../ui/Button'\nimport Form, { FormValues } from '../ui/Form'\nimport Input from '../ui/Input'\nimport Title from '../ui/Title'\n\ninterface IProps {\n  activeStep: Steps\n  initialValue: string\n  setActiveStep: (stepId: Steps) => void\n  submitValues: (stepId: Steps, value: string) => void\n}\n\ntype stepMessages = [string, string]\ntype MessagesType = { [index in Steps]: stepMessages }\n\nconst messages: MessagesType = {\n  [Steps.WHO]: ['Who?', 'e.g. Jenkins'],\n  [Steps.WHAT]: ['What?', 'e.g. is coding'],\n  [Steps.WHEN]: ['When?', 'e.g. today'],\n  [Steps.WHERE]: ['Where?', 'e.g. at home'],\n}\n\nconst inputKey = 'textInput'\n\nconst StepForm = ({ activeStep, initialValue, setActiveStep, submitValues }: IProps) => {\n  const [title, placeholder] = messages[activeStep]\n  const isFirst = activeStep === Steps.WHO\n  const isLast = activeStep === Steps.WHERE\n\n  const handleSubmit = (values: FormValues) => {\n    // Prevent re-render when editing\n    if (initialValue !== values[inputKey]) {\n      submitValues(activeStep, values[inputKey])\n    }\n\n    if (!isLast) {\n      setActiveStep(activeStep + 1)\n    }\n  }\n\n  const handleGoBack = () => setActiveStep(activeStep - 1)\n\n  return (\n    <Flex width={[1, 1 / 2, 1 / 3]} flexDirection=\"column\">\n      <Title variant=\"secondary\" as=\"h2\">\n        {title}\n      </Title>\n      <Form onSubmit={handleSubmit} initialValues={{ [inputKey]: initialValue }}>\n        {({ values, onChange, onSubmit }) => (\n          <form onSubmit={onSubmit}>\n            <Input\n              type=\"text\"\n              name={inputKey}\n              onChange={onChange}\n              placeholder={placeholder}\n              value={values[inputKey]}\n            />\n            <Flex mt={4} justifyContent={isFirst ? 'flex-end' : 'space-between'}>\n              {!isFirst && (\n                <Button type=\"button\" onClick={handleGoBack} variant=\"secondary\">\n                  Back\n                </Button>\n              )}\n              <Button type=\"submit\" variant=\"primary\">\n                {isLast ? 'Update' : 'Continue'}\n              </Button>\n            </Flex>\n          </form>\n        )}\n      </Form>\n    </Flex>\n  )\n}\n\nconst mapDispatchToProps = (state: IStore) => {\n  const activeStep = state.Form.activeStep\n\n  return {\n    activeStep,\n    initialValue: state.Form.values[activeStep] || '',\n  }\n}\n\nexport default connect(\n  mapDispatchToProps,\n  { setActiveStep, submitValues }\n)(StepForm)\n","export interface ITheme {\n  colors: { primary: string; white: string; text: string }\n}\n\nconst theme: ITheme = {\n  colors: {\n    primary: '#2693ff',\n    text: '#000',\n    white: '#fff',\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport posed from 'react-pose'\nimport styled from 'styled-components'\n\nimport { scaleUp } from '../utils/animations'\nimport { usePrevious } from '../utils/hooks'\n\ninterface IProps {\n  value: string\n  onClick: (params: any) => void\n}\n\nconst animationName = 'rise!'\n\nconst Span = styled(posed.div({ [animationName]: scaleUp }))`\n  display: inline-block;\n  cursor: pointer;\n  margin-right: 1rem;\n\n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nconst Word = React.memo(\n  ({ value = '', onClick }: IProps) => {\n    const prevValue = usePrevious(value)\n    const isNew = prevValue === '' && value.length > 0\n\n    return (\n      <Span pose={isNew ? animationName : ''} onClick={onClick}>\n        {value || '----'}\n      </Span>\n    )\n  },\n  (prevProps: any, nextProps: any) => prevProps.value === nextProps.value\n)\n\nexport default Word\n","export const scaleUp = {\n  scale: 1,\n  transition: () => ({\n    type: 'keyframes',\n    values: [0.5, 1.1, 1],\n  }),\n}\n","import { useRef, useEffect } from 'react'\n\nexport function usePrevious(value: any) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef()\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value\n  }, [value]) // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { IStore } from '../redux/rootReducer'\nimport { setActiveStep } from '../redux/Form/creators'\nimport { Steps } from '../redux/Form/reducer'\nimport Title from '../ui/Title'\nimport Word from './Word'\n\ninterface IProps {\n  setActiveStep: (stepId: Steps) => void\n  values: any\n}\n\nconst Sentence = ({ values, setActiveStep }: IProps) => {\n  return (\n    <Title>\n      {Object.entries(values).map(([key, value]: any) => (\n        <Word key={key} onClick={() => setActiveStep(Number(key))} value={value} />\n      ))}\n    </Title>\n  )\n}\n\nexport default connect(\n  (state: IStore) => ({ values: state.Form.values }),\n  { setActiveStep }\n)(Sentence)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { ThemeProvider } from 'styled-components'\n\nimport GlobalStyles from './ui/GlobalStyles'\nimport Layout from './ui/Layout'\nimport store from './redux/store'\nimport StepForm from './features/StepForm'\nimport theme from './theme'\nimport Sentence from './features/Sentence'\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Layout>\n          <Sentence />\n          <StepForm />\n          <GlobalStyles />\n        </Layout>\n      </ThemeProvider>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}